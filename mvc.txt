https://github.com/sandipmohapatra/sandip

Spring MVC :-
-------------------------
Model View and controller
----------------
view :- html/jsp
controller :- .java (support presentation part to model part)
model:- having service+bussiness+DAO (all will be pojo classes)
-----------------------------------------------------------------------
controller :-
here the controller is known as the front controller.
it supports multiple views at a time.
it is also known as multiaction controller.
form validation can be done by the controller
---------------------------------------------
support single view (servlet/jsp) :- 
example :-
<html>
<form action="employee" method=post>
<form action="employee.jsp" method=post>
------------------------------------------
To handle multiple views by single controller we use viewResolvers.
-----------------------------------------------------
From the view the request goes to the DispatcherServlet from there it goes to HandlerMapping  
1)view -->DispatcherServlet (configure) --->HandlerMapping
3)controller -->ModelAndView
4)DispatcherServlet -->ViewResolver(multiple views)
5)DispatcherServlet -->output view
---------------------------------------------------------
1)view :-
<a href="employee.html">Employee</a>
--------------------------------------------------------
2)controller:-
@Controller  <--- this is to mark the class as the controller
public class HelloController
{
@RequestMapping("/employee")
public ModelAndView helloWorld()
{
String message="This is my first MVC program";
return new ModelAndView("result","message",message);
}


}
---------------------------------------------------------------------
3)Configure DispatcherServlet
web.xml
--------------
<web-app>
<servlet>
<servlet-name>spring</servlet-name>
<servlet-class>org.springfarmework.web.servlet.DispatcherServlet</servlet-class>
</servlet>
<servlet-mapping>
<servlet-name>spring</servlet-name>
<url-pattern>*.html</url-pattern>
</servlet-mapping>
</web-app>
-------------------------------------------------------------------------------------
4)viewResolvers for giving the output :-
---------------------------------------------------------------------
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<property name="prefix" value="/WEB-INF/views/"/>
<property name="suffix" value=".jsp"/>
</bean>
----------------------------------------------
5)result.jsp (which will be created under WEB-INF/views/result.jsp)
-------------------
Message is :${message}
-------------------------------------------------------------------------------------------------------------------- 
All the incoming request is intercepted by the DispatcherServlet.(request---->DispatcherServlet)
This works as a front controller.
The DispatcherServlet get entry of HandleMapping from the web.xml file and forwards the request to the controller.
The controller returns an object of ModelAndView .
The DispatcherServlet checks the entry of view resolver in the spring.xml and invokes the specified view component.
---------------------------------------------------------------------------------------------------------------
example 2:-
-------------------
index.jsp
-------------------
<a href="hello.html">First click</a>
<a href="welcome.html">Second click</a>

controller1.java
---------------------------
1)controller:-
@Controller  <--- this is to mark the class as the controller
public class HelloController
{
@RequestMapping("/hello")  <---Handler Mapping
public ModelAndView helloWorld()
{
String message="This is my first MVC program";
return new ModelAndView("result","message",message);
}
}
----------------------------------------------------------------------
controller1.java
---------------------------
2)controller:-
@Controller  <--- this is to mark the class as the controller
public class HelloController
{
@RequestMapping("/welcome")
public ModelAndView helloWorld()
{
String message="Welcome to Spring MVC program";
return new ModelAndView("welcome","message",message);
}
}
----------------------------------------------------------------------
o/p:-
result.jsp
----------------
Message is:${message}
--------------------------------------------------
welcome.jsp
--------------------
Message is:${message}








----------------------------SpringMVC Project--------------------------------------------------------------------- 
index.jsp
--------------
<a href="empform">Add Employee</a>
<a href="viewform">View Employee</a>
---------------------------------------------------------------------------
emp.java(POJO)
----------------
public void Emp
{
private int id,salary;
private String name,design;
constructor()
constructor(parameterized...);
getter()
setter()
--------------------------------------------------
empcontroller.java
--------------------------------------------------
*DispatcherServlet class is responsible to mange the flow of spring MVC controller.

@Controller
public class empcontroller
{
@RequestMapping("/empform")
public ModelAndView showform()
{
return new ModelAndView("empform","command",new Emp());
}

@RequestMapping("/save",method=RequestMethod.POST)
public ModelAndView showform()
{
s.o.p(emp.getName()+emp.getId()+emp.getSalary()+emp.getDesign());
return new ModelAndView("redirect:/viewemp");
}

@RequestMapping("/viewemp")
public ModelAndView viewemp()
{
List<Emp> list=new ArrayList<Emp>();
list.add(new Emp(1,"Rahul","70000","s/w eng"));
list.add(new Emp(2,"Meka","80000","s/w eng"));
list.add(new Emp(3,"Tarun","90000","s/w eng"));
return new ModelAndView("viewemp","list",list);
}
------------------------------------------------------
empform.jsp
--------------------
<form action="save" method="post">
id<input type=text>
name<input type=text>
salary<input type=text>
design<input type=text>
<submit>
</form>
------------------------------------------------
viewemp.jsp
---------------------
<table>
for()
{
${emp.id}
${emp.name}
${emp.salary}
${emp.design}
}
</table>
------------------------------------------------
viewResolver
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<property name="prefix" value="/WEB-INF/views/"/>
<property name="suffix" value=".jsp"/>
</bean>
------------------------------------------------------
web.xml
--------------
<web-app>
<servlet>
<servlet-name>spring</servlet-name>
<servlet-class>org.springfarmework.web.servlet.DispatcherServlet</servlet-class>
</servlet>
<servlet-mapping>
<servlet-name>spring</servlet-name>
<url-pattern>*.html</url-pattern>
</servlet-mapping>
</web-app>
--------------------------------------------------------------------------------
Spring MVC CRUD example(create,read,update,delete)
--------------------------------------------------------------------------------
create table:-(oracle)
create table employee(id number,name varchar2(30),salary number,designation varchar2(30));
------------------------------------------------------------------------------------
index.jsp
----------------
<a href="empform">Add Employee</a>
<a href="viewemp">View Employees</a>
----------------------------------------------------------------
emp.java
-------------------
class emp
{
int id,salary;
String name,design;
getter();
setter();
------------------------------------------------
Empdao.java
-----------------------
public class Empdao
{
JdbcTemplate temp;

public void setTemplate(JdbcTemplate temp)
{
this.temp=temp;
}

public int save(Emp e)
{
String sql="insert into employee values("e.getId()"+" 'e.getName()' "+" 'e.getDesign()' "+"e.salary()");
return temp.update(sql);
}

public int update(Emp e)
{
String sql="update employee set name=' "+e.getName()" '+salary="+e.getSalary()+",design=' "+e.getDesign()+ " ' where id="+e.getId()+" "; 
return temp.update(sql);
}

public int delete(int id)
{
String sql="delete from employee where id="+id" ";
return temp.update(sql);
}

public emp getEmpById(int id)
{
String sql="select * from employee where id=? ";
return temp.queryForObject(sql,RowMapper<Emp> (Emp.class));
}

public List<Emp> getEmployees()
{
return temp.query("select * from employee",new RowMapper<emp>()
{
public emp mapRow(ResultSet rs,int row)throws SQLException
{
emp e=new emp();
e.setId(rs.getInt(1));
e.setName(rs.getString(2));
e.setSalary(rs.getInt(3));
e.setDesign(rs.getString(4));
}
-----------------------------------------------------
empform.jsp
--------------------
<form action="save" method="post">
id<input type=text>
name<input type=text>
salary<input type=text>
design<input type=text>
<submit>
</form>
--------------------------------------------
web.xml
--------------
<web-app>
<servlet>
<servlet-name>spring</servlet-name>
<servlet-class>org.springfarmework.web.servlet.DispatcherServlet</servlet-class>
</servlet>
<servlet-mapping>
<servlet-name>spring</servlet-name>
<url-pattern>*.html</url-pattern>
</servlet-mapping>
</web-app>
--------------------------------------------------------------
spring.xml
-------------------------
<beam id="ds" class="org.springframework.jdbc.datasource.DriverManagerDatasource">
<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
<property name="url" value="jdbc:oracle:thin:@locahost:1521:xe"></property>
<property name="username" value="system"></property>
<property name="password" value="1234"></property>
</bean>

<bean id="jt" class="org.springframe.jdbc.core.JdbcTemplate">
<property name="datasource" ref="ds"/>
</bean>


<bean id="dao" class="com.sandip.dao.Empdao">
<property name="temp" ref="jt"/>
</bean>

<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
<property name="prefix" value="/WEB-INF/views/"/>
<property name="suffix" value=".jsp"/>
</bean>
-------------------------
empeditform.jsp
------------------------------
<form action="edit" method="post">
id<input type=text>
name<input type=text>
salary<input type=text>
design<input type=text>
<submit>
</form>
---------------------------------------
viewemp.jsp
---------------------
<table>
for()
{
${emp.id}
${emp.name}
${emp.salary}
${emp.design}
<a href="editemp/${emp.id}">Edit</a>
<a href="deleteemp/${emp.id}">Delete</a>
}
</table>
--------------------------------------------
controller.java
---------------------
@Controller
public class controller
{
@Autowired
Empdao dao;
@Requestmapping("/empform");
<!-- open the add employee form --->
public ModelAndView showform()
{
return new ModelAndView("empform","command",new Emp());
}

@RequestMapping("/save",method=RequestMethod.POST)
public ModelAndView showform()
{
s.o.p(emp.getName()+emp.getId()+emp.getSalary()+emp.getDesign());
return new ModelAndView("redirect:/viewemp");
}

@RequestMapping("/viewemp")
public ModelAndView viewemp()
{
list<emp>=dao.getEmployees()
return new ModelAndView("viewemp","list",list);
}

@RequestMapping("/editemp/{id}")
public ModelAndView edit(int id)
{
Emp emp=dao.getEmpById(id);
return new ModelAndView("empeditform","command",emp);
}

@RequestMapping("/edit",method=RequestMethod.Post)
public ModelAndView editsave(Emp emp)
{
dao.update(emp)
return new ModelAndView("redirect:/viewemp");
}

@RequestMapping("/deleteemp/{id}",method=RequestMethod.Post)
public ModelAndView delete(int id)
{
dao.delete(id)
return new ModelAndView("redirect:/viewemp");
}
-----------------------------------------------------------------------------























