What is difference between JDBC and Hibernate
----------------------------------------------------------------------
1)jdbc: we can store data in primitive type.(int,string,float)
but in hibernate we can store in Object format.
-------------------------------------------------------------------------------------------
2)In hibernate the connection is written in :- hibernate.cfg.xml
The creation of table is written in:- hibernate.hbm.xml

3)Hibernate is database independent.so it uses java datatype only.

In JDBC to create table for 
oracle data type used are number and varchar2(30) but in 
sqlserver data type used are int and varchar(30)
-------------------------------------------------------------------------------------------
4)Hibernate is a object Relational Mapping tool.(ORM tool) because it stores object into the database.

5)it provides 2 types of caching.

6)In hibernate we neednot have to write the full query.Basic sql queries will be generated by hibernate.

7)query tuning is not required in case of hibernate.

8)development and maintainance is very easy .
--------------------------------------------------------------------------------------------
generator classes:-
------------------------------
1)sequence :-The database sequence is automatically generated.

2)assigned:- It will get the value from the application.

3)increment :- it will increment same as your sequence.
----------------------------------------------------------------------------------------
Session :-
----------------------
1)session.save() :- It is used to save an object into the database.

2)session.update():- It is used to update an object into the database.

3)session.delete():- It is used to delete an existing reord.

4)session.load():- It is used to retrieve  data in object fromat from the database.

5)session.saveOnUpdate():- It will save the record if not there or update the record in the database.

6)session.evict():-It will change the object from persistent state to detached state.It remove the object from the session.

7)session.flush():- it will only update.

8)session.refresh() :- it will synchronize data into the database.

9)session.clear():- it will remove all the objects from the session.

10)session.contains():- it the object is available in the session then it returns true.

11)session.isOpen():- to check if the session is still open.

12)session.get():- it is similar to session.load() to retrive data from the database. if there is no record in the database get() return null where as the session.load will throw exception.
--------------------------------------------------------------------------------------  
program 1:-
-------------------------
MyPojo.java
------------------------
public class MyPojo
{
int id;
String name,address;
getter();
setter();
}
--------------------------------------
hibernate.cfg.xml
------------------------------
<hibernate-configuration>
<session-factory>
<property name="connection.driver.class"></property>
<property name="connection.url"></property>
<property name="dialect">org.hibernate.dialect.OracleDialect</property>
<property name="hbm2ddl.auto">create</property>
<property name="connection.autocommit">true</property>
<mapping resource="hibernate.hbm.xml"/>
</session-factory>
</hibernate-configuration>
 -------------------------------------------------------------------
hibernate.hbm.xml
---------------------------------
<hibernate-mapping>
<class name="MyPojo" table="employee">
<id name="id" column="id" type="int">
<generator class="assigned"/>
</id>
<property name="name" type="string" column="name"/>
<property name="address" type="string" column="address"/>
</hibernate-mapping>
 ---------------------------------------------------------------------------------
main.java
-------------------------
public class main
{
pscm()throws Exception
{
Configuration cfg=new Configuration();
cfg.configure();
SessionFactory sf=cfg.buildSessionfactory();
Session ss=sf.openSession();
MyPojo pojo=new MyPojo();
pojo.setId(101);
pojo.setName("Tarun");
pojo.setAddress("chennei");
Transaction tx=ss.beginTransaction();
ss.save(pojo);
tx.commit();
}
}
-------------------------------------------------------------------------------------
Object life cycle:-
--------------------------------
1)Transient :- When new object is created and it is not there in the database.
2)persistent:- if the object is stored in the database and is a associated with the session.
3)detached:- if the object will stored in the database but not associated with any session.
---------------------------------------------------------------------------------------------