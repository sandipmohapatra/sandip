What is difference between JDBC and Hibernate
----------------------------------------------------------------------
1)jdbc: we can store data in primitive type.(int,string,float)
but in hibernate we can store in Object format.
-------------------------------------------------------------------------------------------
2)In hibernate the connection is written in :- hibernate.cfg.xml
The creation of table is written in:- hibernate.hbm.xml

3)Hibernate is database independent.so it uses java datatype only.

In JDBC to create table for 
oracle data type used are number and varchar2(30) but in 
sqlserver data type used are int and varchar(30)
-------------------------------------------------------------------------------------------
4)Hibernate is a object Relational Mapping tool.(ORM tool) because it stores object into the database.

5)it provides 2 types of caching.

6)In hibernate we neednot have to write the full query.Basic sql queries will be generated by hibernate.

7)query tuning is not required in case of hibernate.

8)development and maintainance is very easy .
--------------------------------------------------------------------------------------------
generator classes:-
------------------------------
1)sequence :-The database sequence is automatically generated.

2)assigned:- It will get the value from the application.

3)increment :- it will increment same as your sequence.
----------------------------------------------------------------------------------------
Session :-
----------------------
1)session.save() :- It is used to save an object into the database.

2)session.update():- It is used to update an object into the database.

3)session.delete():- It is used to delete an existing reord.

4)session.load():- It is used to retrieve  data in object fromat from the database.

5)session.saveOnUpdate():- It will save the record if not there or update the record in the database.

6)session.evict():-It will change the object from persistent state to detached state.It remove the object from the session.

7)session.flush():- it will only update.

8)session.refresh() :- it will synchronize data into the database.

9)session.clear():- it will remove all the objects from the session.

10)session.contains():- it the object is available in the session then it returns true.

11)session.isOpen():- to check if the session is still open.

12)session.get():- it is similar to session.load() to retrive data from the database. if there is no record in the database get() return null where as the session.load will throw exception.
--------------------------------------------------------------------------------------  
program 1:-
-------------------------
MyPojo.java
------------------------
public class MyPojo
{
int id;
String name,address;
getter();
setter();
}
--------------------------------------
hibernate.cfg.xml
------------------------------
<hibernate-configuration>
<session-factory>
<property name="connection.driver.class"></property>
<property name="connection.url"></property>
<property name="dialect">org.hibernate.dialect.OracleDialect</property>
<property name="hbm2ddl.auto">create</property>
<property name="connection.autocommit">true</property>
<mapping resource="hibernate.hbm.xml"/>
</session-factory>
</hibernate-configuration>
 -------------------------------------------------------------------
hibernate.hbm.xml
---------------------------------
<hibernate-mapping>
<class name="MyPojo" table="employee">
<id name="id" column="id" type="int">
<generator class="assigned"/>
</id>
<property name="name" type="string" column="name"/>
<property name="address" type="string" column="address"/>
</hibernate-mapping>
 ---------------------------------------------------------------------------------
main.java
-------------------------
public class main
{
pscm()throws Exception
{
Configuration cfg=new Configuration();
cfg.configure();
SessionFactory sf=cfg.buildSessionfactory();
Session ss=sf.openSession();
MyPojo pojo=new MyPojo();
pojo.setId(101);
pojo.setName("Tarun");
pojo.setAddress("chennei");
Transaction tx=ss.beginTransaction();
ss.save(pojo);
tx.commit();
}
}
-------------------------------------------------------------------------------------
Object life cycle:-
--------------------------------
1)Transient :- When new object is created and it is not there in the database.
2)persistent:- if the object is stored in the database and is a associated with the session.
3)detached:- if the object will stored in the database but not associated with any session.
---------------------------------------------------------------------------------------------
1)HQL (Hibernate Query Language)
select * from emp;(sql)/from emp (hql)
2)Criteria
eq() :- equal
ne():- not equal
ge() :- greater than equal 
3)projection :- aggregate function(avg,min,max)
------------------------------------------------------------
relationship:-
-----------------------
1)one to one
2)one to many
3)many to one
4)many to many
-----------------------------------------------------
cache and Lazy and eager Loading
-----------------------------------------------------
MySql
----------------------
To see the databases
1)show databases;
-----------------------------------------------------
to create database
2)create database cognizantstud;
--------------------------------------------------------
to goto the database
3)use cognizantstud;
-------------------------------------------------------
to drop database
4)drop database cognizantstud;
-----------------------------------------------------------------------
to create a table
5)create table student
( studid int not null auto_increment,
name varchar(30) not null,
address varchar(30) not null,
primary key(studid)
);
----------------------------------------------------------------------------------
6)to insert record
insert into student values(101,'tarun','chennei');
-----------------------------------------------------------------------------------
7)to view the records 
select * from student;
------------------------------------------------------------
8)update the record
update student set address='Bangalore' where name='tarun';
--------------------------------------------------------------------------
9)to create a view (view will not contain any data.it will contain only the query)
create view stud as select studid,name from student;
we can do insert,update and delete of the view it will replect to the base table.
-------------------------------------------------------------------------------
10)to see all the tables and views
show tables;
----------------------------------------------------------------------
11)where condition :-
select * from student where name='tarun';
-------------------------------------------------------------------------
12)distinct :-(unique data will be displayed)
select distinct address from student;
-------------------------------------------------------------------------------
13)order by:-
select * from student order by name;
select * from student order by name asc;
select * from student order by name desc;
--------------------------------------------------------------------------------
14)group by
select address, count(*) from student group by address;
-----------------------------------------------------------------------------------
15)aggregate function
count(),sum(),avg(),min(),max(),first(),last()
---------------------------------------------------------------------
i)select count(*) from student;
first record  :- select name from student limit 1;
last record :-select name from student order by name desc limit 1;
--------------------------------------------------------------------------------------------
16)alter table:-
alter table student add salary int not null;
to add data to salary column :-
update student set salary=45000 where studid=101;
update student set salary=35000 where studid in (102,103,104);
---------------------------------------------------------------------------------
17)select sum(salary) from student;
18)select avg(salary) from student;
19)select min(salary) from student;
20)select max(salary) from student;
----------------------------------------------------------------------------------------------
between and example:-
21)select * from student where salary between 30000 and 46000;
----------------------------------------------------------------------------------------------
like % (wildcard)
----------------------------------------------------------------------------
22)select * from student where name like 'p%';(word starting with p will display)
select * from student where name like '%r';(word ending with r will display)
---------------------------------------------------------------------------
23)truncate table:-
it will delete all the data from the table.
truncate table student;
--------------------------------------------------------------------------- 
24)drop table;
it will delete the data as well as the table also.
drop table student;
-------------------------------------------------------------------------------

25)join
------------------------
create table marks
(studid int(4),
phy int(4),
chem int(4),
maths int(4),
tot int(4),avg int(4));

i)insert into marks(studid,phy,chem,maths) values(101,56,67,78);
ii)update marks set tot=(phy+chem+maths) where studid in (101,102,103);
iii)update marks set avg=tot/3 where studid in (101,102,103);
--------------------------------------

joining 2 tables:-
---------------------------
select a.studid,a.name,a.address,a.salary,b.phy,b.chem,b.maths,b.tot,b.avg from student a,marks b where a.studid=b.studid;
---------------------------------








